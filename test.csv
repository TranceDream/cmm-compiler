0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43
,idn,(,),{,},int,char,float,str,void,epsilon,",",;,=,continue,break,return,while,for,if,else,!,&&,||,++,++,>,>=,<,<=,==,!=,+=,-=,*=,/=,%=,+,-,*,/,%,#
S,error,error,error,error,error,S -> func,S -> func,S -> func,error,S -> func,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
func,error,error,error,error,error,func -> type idn ( args ) funcBody,func -> type idn ( args ) funcBody,func -> type idn ( args ) funcBody,error,func -> type idn ( args ) funcBody,func -> type idn ( args ) funcBody,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,func -> type idn ( args ) funcBody
type,error,error,error,error,error,type -> int,type -> char,type -> float,error,type -> void,type -> epsilon,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
args,error,args -> type idn arg,args -> type idn arg,error,error,args -> type idn arg,args -> type idn arg,args -> type idn arg,error,args -> type idn arg,args -> epsilon,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
funcBody,error,error,error,funcBody -> block,error,error,error,error,error,error,error,error,funcBody -> ;,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
arg,error,error,error,error,error,error,error,error,error,error,arg -> epsilon,"arg -> , type idn arg",error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
block,error,error,error,block -> { defineStmts stmts },error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,error,error,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> epsilon,error,error,error,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,defineStmts -> type idn defineStmt defineStmts,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
stmts,stmts -> stmt stmts,stmts -> stmt stmts,error,error,error,stmts -> stmt stmts,stmts -> stmt stmts,stmts -> stmt stmts,stmts -> stmt stmts,error,stmts -> epsilon,error,error,error,stmts -> stmt stmts,stmts -> stmt stmts,stmts -> stmt stmts,stmts -> stmt stmts,stmts -> stmt stmts,stmts -> stmt stmts,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
defineStmt,defineStmt -> init vars ;,defineStmt -> init vars ;,error,error,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,error,error,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,defineStmt -> init vars ;,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
init,error,error,error,error,error,error,error,error,error,error,init -> epsilon,error,error,init -> = constValue,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
vars,error,error,error,error,error,error,error,error,error,error,vars -> epsilon,"vars -> , idn init vars",error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
stmt,stmt -> assignStmt,stmt -> assignStmt,error,error,error,stmt -> assignStmt,stmt -> assignStmt,stmt -> assignStmt,stmt -> assignStmt,error,error,error,error,error,stmt -> jumpStmt,stmt -> jumpStmt,stmt -> jumpStmt,stmt -> iterationStmt,stmt -> iterationStmt,stmt -> branchStmt,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
assignStmt,assignStmt -> expression ;,assignStmt -> expression ;,error,error,error,assignStmt -> expression ;,assignStmt -> expression ;,assignStmt -> expression ;,assignStmt -> expression ;,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
jumpStmt,error,error,error,error,error,error,error,error,error,error,error,error,error,error,jumpStmt -> continue ;,jumpStmt -> break ;,jumpStmt -> return isNullExpr ;,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
iterationStmt,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,iterationStmt -> while ( logicExpr ) blockStmt,iterationStmt -> for ( isNullExpr ; isNullExpr ; isNullExpr ) blockStmt,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
branchStmt,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,branchStmt -> if ( logicExpr ) blockStmt result,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
expression,expression -> value operation,expression -> value operation,error,error,error,expression -> value operation,expression -> value operation,expression -> value operation,expression -> value operation,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
isNullExpr,isNullExpr -> expression,isNullExpr -> expression,error,error,error,isNullExpr -> expression,isNullExpr -> expression,isNullExpr -> expression,isNullExpr -> expression,error,isNullExpr -> epsilon,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
logicExpr,logicExpr -> expression boolExpr,logicExpr -> expression boolExpr,error,error,error,logicExpr -> expression boolExpr,logicExpr -> expression boolExpr,logicExpr -> expression boolExpr,logicExpr -> expression boolExpr,error,error,error,error,error,error,error,error,error,error,error,error,logicExpr -> ! expression boolExpr,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
blockStmt,error,error,error,blockStmt -> { stmts },error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
result,error,error,error,error,error,error,error,error,error,error,result -> epsilon,error,error,error,error,error,error,error,error,error,result -> else blockStmt,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
boolExpr,error,error,error,error,error,error,error,error,error,error,boolExpr -> epsilon,error,error,error,error,error,error,error,error,error,error,error,boolExpr -> lop expression boolExpr,boolExpr -> lop expression boolExpr,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
lop,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,lop -> &&,lop -> ||,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
value,value -> item valuePrime,value -> item valuePrime,error,error,error,value -> item valuePrime,value -> item valuePrime,value -> item valuePrime,value -> item valuePrime,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
operation,error,error,error,error,error,error,error,error,error,error,operation -> epsilon,error,error,operation -> equalOp value,error,error,error,error,error,error,error,error,error,error,operation -> ++,operation -> ++,operation -> compareOp value,operation -> compareOp value,operation -> compareOp value,operation -> compareOp value,operation -> compareOp value,operation -> compareOp value,operation -> equalOp value,operation -> equalOp value,operation -> equalOp value,operation -> equalOp value,operation -> equalOp value,error,error,error,error,error,error
compareOp,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,compareOp -> >,compareOp -> >=,compareOp -> <,compareOp -> <=,compareOp -> ==,compareOp -> !=,error,error,error,error,error,error,error,error,error,error,error
equalOp,error,error,error,error,error,error,error,error,error,error,error,error,error,equalOp -> =,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,equalOp -> +=,equalOp -> -=,equalOp -> *=,equalOp -> /=,equalOp -> %=,error,error,error,error,error,error
item,item -> factor itemPrime,item -> factor itemPrime,error,error,error,item -> factor itemPrime,item -> factor itemPrime,item -> factor itemPrime,item -> factor itemPrime,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
valuePrime,error,error,error,error,error,error,error,error,error,error,valuePrime -> epsilon,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,valuePrime -> + item valuePrime,valuePrime -> - item valuePrime,error,error,error,error
factor,factor -> idn callFunc,factor -> ( value ),error,error,error,factor -> constValue,factor -> constValue,factor -> constValue,factor -> constValue,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
itemPrime,error,error,error,error,error,error,error,error,error,error,itemPrime -> epsilon,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,itemPrime -> * itemPrime,itemPrime -> / itemPrime,itemPrime -> % itemPrime,error
callFunc,error,callFunc -> ( es ),error,error,error,error,error,error,error,error,callFunc -> epsilon,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
es,es -> isNullExpr isNullEs,es -> isNullExpr isNullEs,es -> isNullExpr isNullEs,error,error,es -> isNullExpr isNullEs,es -> isNullExpr isNullEs,es -> isNullExpr isNullEs,es -> isNullExpr isNullEs,error,es -> isNullExpr isNullEs,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
isNullEs,error,error,error,error,error,error,error,error,error,error,isNullEs -> epsilon,"isNullEs -> , isNullExpr isNullEs",error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
constValue,error,error,error,error,error,constValue -> numConst,constValue -> char,constValue -> float,constValue -> str,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
numConst,error,error,error,error,error,numConst -> int,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error,error
